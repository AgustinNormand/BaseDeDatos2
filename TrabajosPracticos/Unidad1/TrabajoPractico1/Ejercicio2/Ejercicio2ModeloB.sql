CREATE TABLE PERSONA 
(
    DNI INTEGER NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR(20) NOT NULL
);

CREATE TABLE ESTUDIANTE
(
    DNI INTEGER NOT NULL PRIMARY KEY,
    CONSTRAINT FK_ESTUDIANTE_PERSONA FOREIGN KEY (DNI) REFERENCES PERSONA ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE DOCENTE
(
    DNI INTEGER NOT NULL PRIMARY KEY,
    CONSTRAINT FK_DOCENTE_PERSONA FOREIGN KEY (DNI) REFERENCES PERSONA ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE EXCEPTION EX_NO_EXCLUYENTES 'No se puede ser estudiante y docente';

SET TERM ^ ; 

CREATE TRIGGER TRG_BIDOCENTE FOR DOCENTE
    ACTIVE
    BEFORE INSERT
    POSITION 0
AS
BEGIN
    IF ( EXISTS( SELECT * FROM ESTUDIANTE WHERE ESTUDIANTE.DNI = NEW.DNI )) THEN
      EXCEPTION EX_NO_EXCLUYENTES;
END^
    
CREATE TRIGGER TRG_BIESTUDIANTE FOR ESTUDIANTE
    ACTIVE
    BEFORE INSERT
    POSITION 0
AS
BEGIN
    IF ( EXISTS( SELECT * FROM DOCENTE WHERE DOCENTE.DNI = NEW.DNI )) THEN
      EXCEPTION EX_NO_EXCLUYENTES;
END^
    
CREATE TRIGGER TRG_BUDOCENTE FOR DOCENTE
   ACTIVE
   BEFORE UPDATE
   POSITION 0
   AS
BEGIN
   IF (NEW.DNI <> OLD.DNI) THEN
      IF ( EXISTS ( SELECT * FROM ESTUDIANTE WHERE DNI = NEW.DNI) ) THEN
         EXCEPTION EX_NO_EXCLUYENTES;
END^

CREATE TRIGGER TRG_BUESTUDIANTE FOR ESTUDIANTE
   ACTIVE
   BEFORE UPDATE
   POSITION 0
   AS
BEGIN
   IF (NEW.DNI <> OLD.DNI) THEN
      IF ( EXISTS ( SELECT * FROM DOCENTE WHERE DNI = NEW.DNI) ) THEN
         EXCEPTION EX_NO_EXCLUYENTES;
END^

CREATE PROCEDURE SP_PERSONA
   (OPERATION CHAR(1),
   DNI TYPE OF COLUMN PERSONA.DNI,
   NOMBRE TYPE OF COLUMN PERSONA.NOMBRE)
RETURNS(ERROR_CODE INTEGER,
   ERROR_MESSAGE VARCHAR(20))
AS
BEGIN
   ERROR_CODE = 0;
   ERROR_MESSAGE = 'OK';
   IF (OPERATION = 'I') THEN
      INSERT INTO PERSONA VALUES (:DNI,:NOMBRE);
   IF (OPERATION = 'U') THEN
      UPDATE PERSONA SET NOMBRE = :NOMBRE WHERE DNI = :DNI;
   IF (OPERATION = 'D') THEN
      DELETE FROM PERSONA WHERE DNI = :DNI;
   WHEN ANY DO
   BEGIN
      ERROR_CODE = SQLCODE;
      ERROR_MESSAGE = OPERATION || ' in ' || 'PERSONA';
   END
END^

CREATE PROCEDURE SP_CHANGE_PK_PERSONA
   (DNI TYPE OF COLUMN PERSONA.DNI,
    NEW_DNI TYPE OF COLUMN PERSONA.DNI)
RETURNS(ERROR_CODE INTEGER,
   ERROR_MESSAGE VARCHAR(40))
AS
BEGIN
   ERROR_CODE = 0;
   ERROR_MESSAGE = 'OK';
   UPDATE PERSONA SET DNI = :NEW_DNI WHERE DNI = :DNI;
   WHEN ANY DO
   BEGIN
      ERROR_CODE = SQLCODE;
      ERROR_MESSAGE = 'Changing PK in PERSONA';
   END
END^

CREATE PROCEDURE SP_DOCENTE
   (OPERATION CHAR(1),
DNI TYPE OF COLUMN DOCENTE.DNI)
RETURNS(ERROR_CODE INTEGER,
   ERROR_MESSAGE VARCHAR(20))
AS
BEGIN
   ERROR_CODE = 0;
   ERROR_MESSAGE = 'OK';
   IF (OPERATION = 'I') THEN
      INSERT INTO DOCENTE VALUES (:DNI);
   IF (OPERATION = 'D') THEN
      DELETE FROM DOCENTE WHERE DNI = :DNI;

   --NO ADMITO CAMBIAR LA CLAVE DESDE ESTA TABLA, SINO DESDE PERSONA E IMPACTA POR LA FOREIGN KEY EN CASCADA
   -- LOS CAMBIOS DE ATRIBUTOS NO CLAVE, IRIAN EN ESTE PROCEDURE, PERO NO HAY EN LA TABLA ATRIBUTOS NO CLAVE.
   WHEN ANY DO
   BEGIN
      ERROR_CODE = SQLCODE;
      ERROR_MESSAGE = OPERATION || ' in ' || 'DOCENTE';
   END
END^

CREATE PROCEDURE SP_ESTUDIANTE
   (OPERATION CHAR(1),
DNI TYPE OF COLUMN ESTUDIANTE.DNI)
RETURNS(ERROR_CODE INTEGER,
   ERROR_MESSAGE VARCHAR(20))
AS
BEGIN
   ERROR_CODE = 0;
   ERROR_MESSAGE = 'OK';
   IF (OPERATION = 'I') THEN
      INSERT INTO ESTUDIANTE VALUES (:DNI);
   IF (OPERATION = 'D') THEN
      DELETE FROM ESTUDIANTE WHERE DNI = :DNI;

   --NO ADMITO CAMBIAR LA CLAVE DESDE ESTA TABLA, SINO DESDE PERSONA E IMPACTA POR LA FOREIGN KEY EN CASCADA
   -- LOS CAMBIOS DE ATRIBUTOS NO CLAVE, IRIAN EN ESTE PROCEDURE, PERO NO HAY EN LA TABLA ATRIBUTOS NO CLAVE.
   WHEN ANY DO
   BEGIN
      ERROR_CODE = SQLCODE;
      ERROR_MESSAGE = OPERATION || ' in ' || 'ESTUDIANTE';
   END
END^

CREATE PROCEDURE SP_SPERSONA
RETURNS (DNI TYPE OF COLUMN PERSONA.DNI,
   NOMBRE TYPE OF COLUMN PERSONA.NOMBRE)
AS
BEGIN
   FOR SELECT DNI,NOMBRE FROM PERSONA INTO :DNI,:NOMBRE DO SUSPEND;
END^

CREATE PROCEDURE SP_SESTUDIANTE
RETURNS (DNI TYPE OF COLUMN ESTUDIANTE.DNI)
AS
BEGIN
   FOR SELECT DNI FROM ESTUDIANTE INTO :DNI DO SUSPEND;
END^

CREATE PROCEDURE SP_SDOCENTE
RETURNS (DNI TYPE OF COLUMN DOCENTE.DNI)
AS
BEGIN
   FOR SELECT DNI FROM DOCENTE INTO :DNI DO SUSPEND;
END^

SET TERM ; ^

-- SEGURIDAD

CREATE USER AGUSTINEJ2B
   PASSWORD 'asdasd'
   FIRSTNAME 'Agustin'
   MIDDLENAME ''
   LASTNAME 'Normand';

CREATE ROLE USUARIO;

GRANT USUARIO TO AGUSTINEJ2B;

GRANT EXECUTE ON PROCEDURE SP_SDOCENTE TO USUARIO;

GRANT SELECT ON DOCENTE TO PROCEDURE SP_SDOCENTE;

GRANT EXECUTE ON PROCEDURE SP_DOCENTE TO USUARIO;

GRANT INSERT ON DOCENTE TO PROCEDURE SP_DOCENTE;

GRANT DELETE ON DOCENTE TO PROCEDURE SP_DOCENTE;

--

GRANT EXECUTE ON PROCEDURE SP_SESTUDIANTE TO USUARIO;

GRANT SELECT ON ESTUDIANTE TO PROCEDURE SP_SESTUDIANTE;

GRANT EXECUTE ON PROCEDURE SP_ESTUDIANTE TO USUARIO;

GRANT INSERT ON ESTUDIANTE TO PROCEDURE SP_ESTUDIANTE;

GRANT DELETE ON ESTUDIANTE TO PROCEDURE SP_ESTUDIANTE;

--

GRANT EXECUTE ON PROCEDURE SP_SPERSONA TO USUARIO;

GRANT SELECT ON PERSONA TO PROCEDURE SP_SPERSONA;

GRANT EXECUTE ON PROCEDURE SP_PERSONA TO USUARIO;

GRANT INSERT ON PERSONA TO PROCEDURE SP_PERSONA;

GRANT UPDATE ON PERSONA TO PROCEDURE SP_PERSONA;

GRANT DELETE ON PERSONA TO PROCEDURE SP_PERSONA;

GRANT EXECUTE ON PROCEDURE SP_CHANGE_PK_PERSONA TO USUARIO;

GRANT UPDATE ON PERSONA TO PROCEDURE SP_CHANGE_PK_PERSONA;

GRANT SELECT ON PERSONA TO PROCEDURE SP_PERSONA;

GRANT SELECT ON ESTUDIANTE TO PROCEDURE SP_ESTUDIANTE;

GRANT SELECT ON DOCENTE TO PROCEDURE SP_DOCENTE;

GRANT SELECT ON DOCENTE TO TRIGGER TRG_BIESTUDIANTE;

GRANT SELECT ON DOCENTE TO TRIGGER TRG_BUESTUDIANTE;

GRANT SELECT ON ESTUDIANTE TO TRIGGER TRG_BIDOCENTE;

GRANT SELECT ON ESTUDIANTE TO TRIGGER TRG_BUDOCENTE;

GRANT SELECT ON PERSONA TO PROCEDURE SP_CHANGE_PK_PERSONA;



