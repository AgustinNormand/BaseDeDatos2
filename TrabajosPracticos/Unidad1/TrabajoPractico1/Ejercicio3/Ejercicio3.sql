CREATE TABLE PRODUCTO
(
    ID INTEGER NOT NULL,
    PRECIO INTEGER NOT NULL,

    CONSTRAINT PK_PRODUCTO PRIMARY KEY (ID)
);

CREATE TABLE FACTURA
(
    NRO INTEGER NOT NULL,
    SUBTOTAL INTEGER NOT NULL,

   CONSTRAINT PK_FACTURA PRIMARY KEY (NRO)
);

CREATE TABLE DETALLE
(
    NRO INTEGER NOT NULL,
    ID INTEGER NOT NULL,
    DESCRIPCION VARCHAR(20),

    CONSTRAINT PK_DETALLE PRIMARY KEY (NRO,ID),
    CONSTRAINT FK_DETALLE_FACTURA FOREIGN KEY (NRO) REFERENCES FACTURA,
    CONSTRAINT FK_DETALLE_PRODUCTO FOREIGN KEY (ID) REFERENCES PRODUCTO
);

CREATE TABLE AXFACTURA
(
    NRO INTEGER NOT NULL,
    DETALLES_RESTANTES INTEGER NOT NULL,
   
    CONSTRAINT PK_AXFACTURA PRIMARY KEY (NRO)
);

CREATE EXCEPTION EX_MAX_DETALLES 'Alcanz√≥ la cantidad maxima de detalles';

CREATE EXCEPTION EX_NRO_FACTURA 'No se puede cambiar el NRO de factura';

CREATE EXCEPTION EX_ID_PRODUCTO 'No se puede cambiar el ID de producto';


SET TERM ^ ;

CREATE TRIGGER TRG_AIFACTURA FOR FACTURA
ACTIVE
AFTER INSERT
POSITION 0
AS
BEGIN
    INSERT INTO AXFACTURA (NRO,DETALLES_RESTANTES)
    VALUES ( NEW.NRO , 3);
END^

CREATE TRIGGER TRG_ADFACTURA FOR FACTURA
ACTIVE
AFTER DELETE
POSITION 0
AS
BEGIN
    DELETE FROM AXFACTURA WHERE NRO = OLD.NRO;
END^

CREATE TRIGGER TRG_BUFACTURA FOR FACTURA
ACTIVE
BEFORE UPDATE
POSITION 0
AS
BEGIN
   IF (NEW.NRO <> OLD.NRO) THEN
      EXCEPTION EX_NRO_FACTURA;
END^

CREATE TRIGGER TRG_BIDETALLE FOR DETALLE
ACTIVE 
BEFORE INSERT 
POSITION 0
AS
    DECLARE AUX_DETALLES_RESTANTES INTEGER;
BEGIN 
    AUX_DETALLES_RESTANTES = (SELECT DETALLES_RESTANTES
                                FROM AXFACTURA
                                WHERE NRO = NEW.NRO);
    IF (AUX_DETALLES_RESTANTES <= 0) THEN 
        EXCEPTION EX_MAX_DETALLES;

END^ 

CREATE TRIGGER TRG_AIDETALLE FOR DETALLE
ACTIVE 
AFTER INSERT 
POSITION 0
AS
BEGIN 
  UPDATE AXFACTURA
  SET DETALLES_RESTANTES = DETALLES_RESTANTES-1
  WHERE NRO = NEW.NRO;
END^ 


CREATE TRIGGER TRG_BUPRODUCTO FOR PRODUCTO
ACTIVE
BEFORE UPDATE
POSITION 0
AS
BEGIN
   IF (NEW.ID <> OLD.ID) THEN
      EXCEPTION EX_ID_PRODUCTO;
END^

CREATE TRIGGER TRG_BUDETALLE FOR DETALLE
ACTIVE
BEFORE UPDATE
POSITION 0
AS
   DECLARE AXDETALLES_RESTANTES INTEGER;
BEGIN
   IF (NEW.NRO <> OLD.NRO) THEN 
      AXDETALLES_RESTANTES = ( SELECT DETALLES_RESTANTES FROM AXFACTURA WHERE NRO = NEW.NRO );
      IF ( AXDETALLES_RESTANTES <=0 ) THEN
         EXCEPTION EX_MAX_DETALLES;   
END^

CREATE TRIGGER TRG_AUDETALLE FOR DETALLE
ACTIVE
AFTER UPDATE
POSITION 0
AS
BEGIN
   IF (NEW.NRO <> OLD.NRO) THEN
   BEGIN
      UPDATE AXFACTURA
      SET DETALLES_RESTANTES = DETALLES_RESTANTES+1
      WHERE NRO = OLD.NRO;

      UPDATE AXFACTURA
      SET DETALLES_RESTANTES = DETALLES_RESTANTES-1
      WHERE NRO = NEW.NRO;
   END 
END^

CREATE TRIGGER TRG_ADDETALLE FOR DETALLE
ACTIVE
AFTER DELETE
POSITION 0
AS
BEGIN
   UPDATE AXFACTURA
   SET DETALLES_RESTANTES = DETALLES_RESTANTES +1
   WHERE NRO = OLD.NRO;         
END^

SET TERM ; ^

-- SEGURIDAD

CREATE USER AGUSTINEJ3
   PASSWORD 'asdasd'
   FIRSTNAME 'Agustin'
   MIDDLENAME ''
   LASTNAME 'Normand';

CREATE ROLE USUARIO;

GRANT USUARIO TO AGUSTINEJ3;

GRANT SELECT ON FACTURA TO USUARIO;

GRANT SELECT ON DETALLE TO USUARIO;

GRANT SELECT ON PRODUCTO TO USUARIO;

GRANT SELECT ON AXFACTURA TO USUARIO;

--

GRANT INSERT ON FACTURA TO USUARIO;

GRANT INSERT ON DETALLE TO USUARIO;

GRANT INSERT ON PRODUCTO TO USUARIO;

--

GRANT UPDATE ON FACTURA TO USUARIO;

GRANT UPDATE ON DETALLE TO USUARIO;

GRANT UPDATE ON PRODUCTO TO USUARIO;

--

GRANT DELETE ON FACTURA TO USUARIO;

GRANT DELETE ON DETALLE TO USUARIO;

GRANT DELETE ON PRODUCTO TO USUARIO;

--

GRANT INSERT ON AXFACTURA TO TRIGGER TRG_AIFACTURA;

GRANT DELETE ON AXFACTURA TO TRIGGER TRG_ADFACTURA;

GRANT SELECT ON AXFACTURA TO TRIGGER TRG_BIDETALLE;

GRANT UPDATE ON AXFACTURA TO TRIGGER TRG_AIDETALLE;

GRANT SELECT ON AXFACTURA TO TRIGGER TRG_BUDETALLE;

GRANT UPDATE ON AXFACTURA TO TRIGGER TRG_AUDETALLE;

GRANT UPDATE ON AXFACTURA TO TRIGGER TRG_ADDETALLE;
