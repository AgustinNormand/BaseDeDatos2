CREATE TABLE PRODUCTO
(
    ID INTEGER NOT NULL PRIMARY KEY,
    PRECIO INTEGER NOT NULL

);

CREATE TABLE FACTURA
(

    NRO INTEGER NOT NULL PRIMARY KEY,
    SUBTOTAL INTEGER NOT NULL,
    DETALLES_RESTANTES INTEGER

);

CREATE TABLE DETALLE
(

    NRO INTEGER NOT NULL,
    ID INTEGER NOT NULL,
    DESCRIPCION VARCHAR(20),

    CONSTRAINT PK_DETALLE PRIMARY KEY (NRO,ID),
    CONSTRAINT FK_DETALLE_FACTURA FOREIGN KEY (NRO) REFERENCES FACTURA,
    CONSTRAINT FK_DETALLE_PRODUCTO FOREIGN KEY (ID) REFERENCES PRODUCTO

);


CREATE EXCEPTION EX_OPERATION 'No existe una operacion con el caracter indicado';

CREATE EXCEPTION EX_MAX_DETALLES 'Alcanz√≥ el limite de detalles';

CREATE EXCEPTION EX_NRO_FACTURA 'No se puede cambiar el numero de factura';


SET TERM ^ ;

-- PROCEDURES

CREATE PROCEDURE SP_FACTURA (
 OPERATION CHAR(1),
 NRO TYPE OF COLUMN FACTURA.NRO,
 SUBTOTAL TYPE OF COLUMN FACTURA.SUBTOTAL
 )
RETURNS 
 (
 ERROR_CODE INTEGER,
 ERROR_MESSAGE VARCHAR(20)
 )
AS 
BEGIN
   ERROR_CODE = 0;
   ERROR_MESSAGE = 'OK';

   IF (OPERATION = 'I') THEN
      INSERT INTO FACTURA VALUES (:NRO,:SUBTOTAL,3);
   IF (OPERATION = 'D') THEN
      DELETE FROM FACTURA WHERE NRO = :NRO;
   IF (OPERATION = 'U') THEN
      UPDATE FACTURA SET SUBTOTAL = :SUBTOTAL WHERE NRO = :NRO;
   IF (OPERATION <> 'U' AND OPERATION <> 'D' AND OPERATION <> 'I') THEN
      EXCEPTION EX_OPERATION;
   WHEN ANY DO 
   BEGIN
      ERROR_CODE = SQLCODE;
      ERROR_MESSAGE = 'OP=' || OPERATION || 'TABLE=' || 'FACTURA';
   END

END^

CREATE PROCEDURE SP_DETALLE
(OPERATION CHAR(1),
NRO TYPE OF COLUMN DETALLE.NRO,
ID TYPE OF COLUMN DETALLE.ID,
DESCRIPCION TYPE OF COLUMN DETALLE.DESCRIPCION)
RETURNS(
ERROR_CODE INTEGER,
ERROR_MESSAGE VARCHAR(20))
AS
BEGIN
   ERROR_CODE = 0;
   ERROR_MESSAGE = 'OK';
   IF (OPERATION = 'I') THEN
      INSERT INTO DETALLE VALUES (:NRO,:ID,:DESCRIPCION);
   IF (OPERATION = 'D') THEN
      DELETE FROM DETALLE WHERE NRO = :NRO AND ID = :ID;
   IF (OPERATION = 'U') THEN
      UPDATE DETALLE SET DESCRIPCION = :DESCRIPCION WHERE NRO = :NRO AND ID = :ID;
   IF (OPERATION <> 'U' AND OPERATION <> 'D' AND OPERATION <> 'I') THEN
      EXCEPTION EX_OPERATION;
   WHEN ANY DO 
   BEGIN
      ERROR_CODE = SQLCODE;
      ERROR_MESSAGE = 'OP=' || OPERATION || 'TABLE=' || 'DETALLE';
   END
END^

CREATE PROCEDURE SP_PRODUCTO
(OPERATION CHAR(1),
ID TYPE OF COLUMN PRODUCTO.ID,
PRECIO TYPE OF COLUMN PRODUCTO.PRECIO)
RETURNS(
ERROR_CODE INTEGER,
ERROR_MESSAGE VARCHAR(20))
AS
BEGIN
   ERROR_CODE = 0;
   ERROR_MESSAGE = 'OK';
   IF (OPERATION = 'I') THEN
      INSERT INTO PRODUCTO VALUES (:ID,:PRECIO);
   IF (OPERATION = 'D') THEN
      DELETE FROM PRODUCTO WHERE ID = :ID;
   IF (OPERATION = 'U') THEN
      UPDATE PRODUCTO SET PRECIO = :PRECIO WHERE ID = :ID;
   IF (OPERATION <> 'U' AND OPERATION <> 'D' AND OPERATION <> 'I') THEN
      EXCEPTION EX_OPERATION;
   WHEN ANY DO 
   BEGIN
      ERROR_CODE = SQLCODE;
      ERROR_MESSAGE = 'OP=' || OPERATION || 'TABLE=' || 'PRODUCTO';
   END
END^

CREATE PROCEDURE SP_SFACTURA
RETURNS (
NRO TYPE OF COLUMN FACTURA.NRO,
SUBTOTAL TYPE OF COLUMN FACTURA.SUBTOTAL)
AS
BEGIN
   FOR SELECT NRO,SUBTOTAL FROM FACTURA INTO :NRO,:SUBTOTAL DO SUSPEND;
END^

CREATE PROCEDURE SP_SDETALLE
RETURNS (
NRO TYPE OF COLUMN DETALLE.NRO,
ID TYPE OF COLUMN DETALLE.ID,
DESCRIPCION TYPE OF COLUMN DETALLE.DESCRIPCION)
AS
BEGIN
   FOR SELECT NRO,ID,DESCRIPCION FROM DETALLE INTO :NRO,:ID,:DESCRIPCION DO SUSPEND;
END^

CREATE PROCEDURE SP_SPRODUCTO
RETURNS (
ID TYPE OF COLUMN PRODUCTO.ID,
PRECIO TYPE OF COLUMN PRODUCTO.PRECIO
)
AS
BEGIN
   FOR SELECT ID,PRECIO FROM PRODUCTO INTO :ID,:PRECIO DO SUSPEND;
END^

-- ENDPROCEDURES
-- TRIGGERS

CREATE TRIGGER TGR_BIFACTURA FOR FACTURA
ACTIVE
BEFORE INSERT
POSITION 0
AS
BEGIN
   NEW.DETALLES_RESTANTES = 3;
END^

CREATE TRIGGER TRG_BIDETALLE FOR DETALLE
ACTIVE 
BEFORE INSERT 
POSITION 0
AS
    DECLARE AUX_DETALLES_RESTANTES INTEGER;
BEGIN 
    AUX_DETALLES_RESTANTES = (SELECT DETALLES_RESTANTES
                                FROM FACTURA
                                WHERE NRO = NEW.NRO);
    IF (AUX_DETALLES_RESTANTES <= 0) THEN 
        EXCEPTION EX_MAX_DETALLES;

END^ 

CREATE TRIGGER TRG_AIDETALLE FOR DETALLE
ACTIVE 
AFTER INSERT 
POSITION 0
AS
BEGIN 
  UPDATE FACTURA
  SET DETALLES_RESTANTES = DETALLES_RESTANTES-1
  WHERE NRO = NEW.NRO;
END^ 

CREATE TRIGGER TRG_BUFACTURA FOR FACTURA
ACTIVE
BEFORE UPDATE
POSITION 0
AS
BEGIN
   IF (NEW.NRO <> OLD.NRO) THEN
      EXCEPTION EX_NRO_FACTURA;
END^

CREATE TRIGGER TRG_BUDETALLE FOR DETALLE
ACTIVE
BEFORE UPDATE
POSITION 0
AS
   DECLARE AXDETALLES_RESTANTES INTEGER;
BEGIN
   IF (NEW.NRO <> OLD.NRO) THEN 
      AXDETALLES_RESTANTES = ( SELECT DETALLES_RESTANTES FROM FACTURA WHERE NRO = NEW.NRO );
      IF ( AXDETALLES_RESTANTES <=0 ) THEN
         EXCEPTION EX_MAX_DETALLES;   
END^

CREATE TRIGGER TRG_AUDETALLE FOR DETALLE
ACTIVE
AFTER UPDATE
POSITION 0
AS
BEGIN
   IF (NEW.NRO <> OLD.NRO) THEN
   BEGIN
      UPDATE FACTURA
      SET DETALLES_RESTANTES = DETALLES_RESTANTES+1
      WHERE NRO = OLD.NRO;

      UPDATE FACTURA
      SET DETALLES_RESTANTES = DETALLES_RESTANTES-1
      WHERE NRO = NEW.NRO;
   END   
END^

CREATE TRIGGER TRG_ADDETALLE FOR DETALLE
ACTIVE
AFTER DELETE
POSITION 0
AS
BEGIN
   UPDATE FACTURA
   SET DETALLES_RESTANTES = DETALLES_RESTANTES +1
   WHERE NRO = OLD.NRO;         
END^


-- END TRIGGERS

SET TERM ; ^
