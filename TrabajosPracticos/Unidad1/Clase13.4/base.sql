CREATE TABLE CLIENTE(
   ID INTEGER NOT NULL,
   DESCRIPCION VARCHAR(100),

   CONSTRAINT PK_CLIENTE PRIMARY KEY (ID)    
);

CREATE TABLE FACTURA(
   NRO INTEGER NOT NULL,
   DESCRIPCION VARCHAR(100),
   ID INTEGER NOT NULL,

   CONSTRAINT PK_FACTURA PRIMARY KEY (NRO),
   CONSTRAINT FK_FACTURA_CLIENTE FOREIGN KEY (ID) REFERENCES CLIENTE (ID)
);

CREATE TABLE ULTIMAS_VENTAS(
   ID INTEGER NOT NULL,
   NRO INTEGER NOT NULL,
   
   CONSTRAINT PK_ULTIMAS_VENTAS PRIMARY KEY (ID,NRO)
);

CREATE TABLE ULTIMAS_VENTAS_BACKUP(
   ID INTEGER NOT NULL,

   CONSTRAINT PK_ULTIMAS_VENTAS_BACKUP PRIMARY KEY (ID)
);

CREATE EXCEPTION EX_NRO_FACTURA 'NO SE PUEDE CAMBIAR EL NRO DE FACTURA';

SET TERM ^ ;

CREATE TRIGGER TRG_AIFACTURA FOR FACTURA
ACTIVE
AFTER INSERT
POSITION 0
AS
   DECLARE CANTIDAD_VENTAS INTEGER;
   DECLARE VENTA_MAS_ANTIGUA INTEGER;
BEGIN
   INSERT INTO ULTIMAS_VENTAS(ID,NRO) VALUES(NEW.ID,NEW.NRO);
   CANTIDAD_VENTAS = (SELECT COUNT(*) FROM ULTIMAS_VENTAS WHERE ID = NEW.ID);
   IF( CANTIDAD_VENTAS = 4 ) THEN
   BEGIN
      VENTA_MAS_ANTIGUA = (SELECT MIN(NRO) FROM ULTIMAS_VENTAS WHERE ID = NEW.ID);
      DELETE FROM ULTIMAS_VENTAS WHERE NRO = :VENTA_MAS_ANTIGUA;
   END   
END^

CREATE TRIGGER TRG_AICLIENTE FOR CLIENTE
ACTIVE
AFTER INSERT
POSITION 0
AS
BEGIN
   INSERT INTO ULTIMAS_VENTAS_BACKUP(ID) VALUES (NEW.ID);
END^

CREATE TRIGGER TRG_ADFACTURA FOR FACTURA
ACTIVE
AFTER DELETE
POSITION 0
AS
   DECLARE ID INTEGER;
   DECLARE NRO INTEGER;
BEGIN
   DELETE FROM ULTIMAS_VENTAS WHERE NRO = OLD.NRO;
END^

CREATE TRIGGER TRG_BUFACTURA FOR FACTURA
ACTIVE
BEFORE UPDATE
POSITION 0
AS
BEGIN
   IF(OLD.NRO <> NEW.NRO) THEN
      EXCEPTION EX_NRO_FACTURA;
END^

CREATE TRIGGER TRG_AUFACTURA FOR FACTURA
ACTIVE
AFTER UPDATE
POSITION 0
AS
   DECLARE NRO INTEGER;
   DECLARE CANTIDAD_VENTAS INTEGER;
BEGIN
   NRO = 0;
   IF(OLD.ID <> NEW.ID) THEN
   BEGIN
      DELETE FROM ULTIMAS_VENTAS WHERE ID = OLD.ID AND NRO = OLD.NRO;
      CANTIDAD_VENTAS = ( SELECT COUNT(*) FROM ULTIMAS_VENTAS WHERE ID = NEW.ID);
      IF (CANTIDAD_VENTAS < 3) THEN
         IF( (SELECT COUNT(*) FROM ULTIMAS_VENTAS WHERE NRO = OLD.NRO) = 0 ) THEN
            INSERT INTO ULTIMAS_VENTAS(ID,NRO) VALUES(NEW.ID,OLD.NRO);
      IF (CANTIDAD_VENTAS = 3) THEN
      BEGIN
         NRO = ( SELECT FIRST 1 NRO 
                 FROM ULTIMAS_VENTAS 
                 WHERE ID = NEW.ID AND NRO < OLD.NRO
                 ORDER BY NRO DESC );
         IF( NRO <> 0 ) THEN
         BEGIN
            DELETE FROM ULTIMAS_VENTAS WHERE NRO = :NRO;
        END
      END
   END
END^

CREATE TRIGGER TRG_ADULTIMAS_VENTAS FOR ULTIMAS_VENTAS
ACTIVE
AFTER DELETE
POSITION 0
AS
BEGIN
   DELETE FROM ULTIMAS_VENTAS_BACKUP WHERE ID = OLD.ID;
   INSERT INTO ULTIMAS_VENTAS_BACKUP(ID) VALUES (OLD.ID);
END^

CREATE TRIGGER TRG_ADULTIMAS_VENTAS_BACKUP FOR ULTIMAS_VENTAS_BACKUP
ACTIVE
AFTER DELETE
POSITION 0
AS
   DECLARE CANTIDAD_VENTAS INTEGER;
   DECLARE ULTIMA_VENTA INTEGER;
BEGIN
   CANTIDAD_VENTAS = ( SELECT COUNT(*) FROM ULTIMAS_VENTAS WHERE ID = OLD.ID );
   IF( CANTIDAD_VENTAS = 2 ) THEN
   BEGIN
      ULTIMA_VENTA = (SELECT FIRST 1 f.NRO 
                      FROM FACTURA f 
                      WHERE f.ID = OLD.ID AND NOT EXISTS( SELECT * 
                                                          FROM ULTIMAS_VENTAS uv 
                                                          WHERE uv.NRO = f.NRO ) 
                      ORDER BY NRO DESC);
   IF (ULTIMA_VENTA IS NOT NULL) THEN
      INSERT INTO ULTIMAS_VENTAS(ID,NRO) VALUES (OLD.ID,:ULTIMA_VENTA);
   END
   
END^

SET TERM ; ^
