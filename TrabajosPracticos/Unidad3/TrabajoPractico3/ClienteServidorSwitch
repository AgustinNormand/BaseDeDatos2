using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Net;
using System.Net.Sockets;
namespace ClienteServidorSwitch {
	public partial class Form1: Form {
		string IPServidorSwitch = "192.168.1.30";
		int PuertoServidorSwitch = 6666;
		public Form1() {
			InitializeComponent();
			textBox2.Visible = false;
		}
		//probar conexion con el servidor 192.168.1.30
		private void button1_Click(object sender, EventArgs e) {
			PruebaConexion();
		}
		//Query a MySql
		private void button3_Click(object sender, EventArgs e) {
			RealizarQuery("m:");
		}
		//metadata bases de datos MySql
		private void button5_Click(object sender, EventArgs e) {
			ConsultaBasesDatos("m:INFORMATION_SCHEMA:SELECT SCHEMA_NAME FROM
SCHEMATA");
		}
		//metadata tablas
		private void button6_Click(object sender, EventArgs e) {
			ConsultaTablas("m:INFORMATION_SCHEMA:SELECT table_name FROM tables
WHERE table_schema = '" + txBaseDatos.Text.Trim() + "'");
		}
		//Atributos MySql
		private void button7_Click(object sender, EventArgs e) {
			ConsultaAtributos("m:INFORMATION_SCHEMA:SELECT COLUMN_NAME FROM
COLUMNS WHERE table_name = '" + txTabla.Text.Trim() + "'");
		}
		private void comboBox3_SelectedIndexChanged(object sender, EventArgs e) {
			//
			textBox1.Text = comboBox3.SelectedItem.ToString().Trim();
		}
		private void listBox1_SelectedIndexChanged(object sender, EventArgs e) {
			txBaseDatos.Text = listBox1.SelectedItem.ToString().Trim();
		}
		private void listBox2_SelectedIndexChanged(object sender, EventArgs e) {
			txTabla.Text = listBox2.SelectedItem.ToString().Trim();
		}
		private void listBox3_SelectedIndexChanged(object sender, EventArgs e) {
			textBox1.Text = listBox3.SelectedItem.ToString().Trim();
		}
		//Bases de datos Postgresql
		private void button8_Click(object sender, EventArgs e) {
			ConsultaBasesDatos("p:postgres:SELECT datname FROM pg_database WHERE
datistemplate = false;");
		}
		//Tablas de la base de datos postgresql
		private void button9_Click(object sender, EventArgs e) {
			ConsultaTablas("p:" + txBaseDatos.Text.Trim() + ":select table_name FROM
information_schema.tables where table_schema = 'public' order by table_name");
		}
		//Atributos Postgresql
		private void button10_Click(object sender, EventArgs e) {
			ConsultaAtributos("p:" + txBaseDatos.Text.Trim() + ":SELECT attname FROM
pg_catalog.pg_attribute " + " inner join pg_catalog.pg_class on pg_catalog.pg_class.relfilenode =
pg_catalog.pg_attribute.attrelid " + " where pg_catalog.pg_class.relname = '" + txTabla.Text.Trim() + "'");
		}
		private void PG_BaseDeDatos_Click(object sender, EventArgs e) {
			ConsultaBasesDatos("p:postgres:SELECT datname FROM pg_database WHERE
datistemplate = false;");
		}
		//Query Postgresql
		private void button2_Click(object sender, EventArgs e) {
			RealizarQuery("p:");
		}
		//Query Postgresql
		private void PG_Query_Click(object sender, EventArgs e) {
			RealizarQuery("p:");
		}
		private void PG_Tablas_Click(object sender, EventArgs e) {
			ConsultaTablas("p:" + txBaseDatos.Text.Trim() + ":select table_name FROM
information_schema.tables where table_schema = 'public' order by table_name");
		}
		private void PG_Atributos_Click(object sender, EventArgs e) {
			ConsultaAtributos("p:" + txBaseDatos.Text.Trim() + ":SELECT attname FROM
pg_catalog.pg_attribute " + " inner join pg_catalog.pg_class on pg_catalog.pg_class.relfilenode =
pg_catalog.pg_attribute.attrelid " + " where pg_catalog.pg_class.relname = '" + txTabla.Text.Trim() + "'");
		}
		public void RealizarQuery(string SGBD) {
			if (SGBD[0] == 'm') label4.Text = "Query a MySql";
			else label4.Text = "Query a Postgresql";
			listBox4.Items.Clear();
			textBox2.Text = " ";
			textBox2.Visible = false;
			byte[] bytes = new byte[1024];
			Socket miSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
			IPEndPoint Direccion = new IPEndPoint(IPAddress.Parse(IPServidorSwitch), PuertoServidorSwitch);
			try {
				miSocket.Connect(Direccion);
				if (textBox1.Text.Length == 0) {
					textBox1.Text = "?????";
				}
				byte[] query = Encoding.ASCII.GetBytes(SGBD + txBaseDatos.Text.Trim() + ":" + textBox1.Text.Trim());
				int bytesSentq = miSocket.Send(query);
				int bytesRec = miSocket.Receive(bytes);
				textBox2.Text = Encoding.ASCII.GetString(bytes, 0, bytesRec);
				miSocket.Close();
				int i;
				listBox4.Text = "Seleccionar";
				for (i = 0; i < textBox2.Lines.Length; i++)
				listBox4.Items.Add(textBox2.Lines[i]);
			}
			catch(Exception error) {
				textBox2.Visible = true;
				textBox2.Text = "Error: {0}" + error.ToString();
			}
		}
		private void MY_Query_Click(object sender, EventArgs e) {
			RealizarQuery("m:");
		}
		public void ConsultaBasesDatos(string ConsultaBasesDatosPostgresql) {
			if (ConsultaBasesDatosPostgresql[0] == 'p') label1.Text = "Bases de Datos Postgresql";
			else label1.Text = "Bases de Datos MySql";
			listBox1.Items.Clear();
			listBox2.Items.Clear();
			listBox3.Items.Clear();
			listBox4.Items.Clear();
			txBaseDatos.Text = " ";
			txTabla.Text = " ";
			textBox2.Text = " ";
			textBox2.Visible = false;
			textBox1.Text = ConsultaBasesDatosPostgresql;
			byte[] bytes = new byte[1024];
			Socket miSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
			IPEndPoint Direccion = new IPEndPoint(IPAddress.Parse(IPServidorSwitch), PuertoServidorSwitch);
			try {
				miSocket.Connect(Direccion);
				byte[] query = Encoding.ASCII.GetBytes(textBox1.Text.Trim());
				int bytesSentq = miSocket.Send(query);
				int bytesRec = miSocket.Receive(bytes);
				textBox2.Text = Encoding.ASCII.GetString(bytes, 0, bytesRec);
				miSocket.Close();
				int i;
				listBox1.Text = "Seleccionar";
				for (i = 0; i < textBox2.Lines.Length; i++)
				listBox1.Items.Add(textBox2.Lines[i]);
			}
			catch(Exception error) {
				textBox2.Visible = true;
				textBox2.Text = "Error: {0}" + error.ToString();
			}
		}
		public void ConsultaTablas(string QueryTablas) {
			label2.Text = "Tablas";
			listBox2.Items.Clear();
			listBox3.Items.Clear();
			listBox4.Items.Clear();
			textBox2.Text = " ";
			textBox2.Visible = false;
			textBox1.Text = QueryTablas;
			byte[] bytes = new byte[1024];
			Socket miSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
			IPEndPoint Direccion = new IPEndPoint(IPAddress.Parse(IPServidorSwitch), PuertoServidorSwitch);
			try {
				miSocket.Connect(Direccion);
				byte[] query = Encoding.ASCII.GetBytes(textBox1.Text.Trim());
				int bytesSentq = miSocket.Send(query);
				int bytesRec = miSocket.Receive(bytes);
				textBox2.Text = Encoding.ASCII.GetString(bytes, 0, bytesRec);
				miSocket.Close();
				int i;
				listBox2.Text = "Seleccionar";
				for (i = 0; i < textBox2.Lines.Length; i++)
				listBox2.Items.Add(textBox2.Lines[i]);
			}
			catch(Exception error) {
				textBox2.Visible = true;
				textBox2.Text = "Error: {0}" + error.ToString();
			}
		}
		private void MY_BasesDeDatos_Click(object sender, EventArgs e) {
			ConsultaBasesDatos("m:INFORMATION_SCHEMA:SELECT SCHEMA_NAME FROM
SCHEMATA");
		}
		public void ConsultaAtributos(string Atributos) {
			label3.Text = "Atributos";
			listBox3.Items.Clear();
			listBox4.Items.Clear();
			textBox2.Text = " ";
			textBox2.Visible = false;
			textBox1.Text = Atributos;
			byte[] bytes = new byte[1024];
			Socket miSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
			IPEndPoint Direccion = new IPEndPoint(IPAddress.Parse(IPServidorSwitch), PuertoServidorSwitch);
			try {
				miSocket.Connect(Direccion);
				byte[] query = Encoding.ASCII.GetBytes(textBox1.Text.Trim());
				int bytesSentq = miSocket.Send(query);
				int bytesRec = miSocket.Receive(bytes);
				textBox2.Text = Encoding.ASCII.GetString(bytes, 0, bytesRec);
				miSocket.Close();
				int i;
				listBox3.Text = "Seleccionar";
				for (i = 0; i < textBox2.Lines.Length; i++)
				listBox3.Items.Add(textBox2.Lines[i]);
			}
			catch(Exception error) {
				textBox2.Visible = true;
				textBox2.Text = "Error: {0}" + error.ToString();
			}
		}
		private void MY_Tablas_Click(object sender, EventArgs e) {
			ConsultaTablas("m:INFORMATION_SCHEMA:SELECT table_name FROM tables
WHERE table_schema = '" + txBaseDatos.Text.Trim() + "'");
		}
		private void MY_Atributos_Click(object sender, EventArgs e) {
			ConsultaAtributos("m:INFORMATION_SCHEMA:SELECT COLUMN_NAME FROM
COLUMNS WHERE table_name = '" + txTabla.Text.Trim() + "'");
		}
		public void PruebaConexion() {
			textBox2.Text = " ";
			textBox2.Visible = false;
			Socket miSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
			IPEndPoint Direccion = new IPEndPoint(IPAddress.Parse(IPServidorSwitch), PuertoServidorSwitch);
			textBox2.Visible = true;
			try {
				miSocket.Connect(Direccion); // Conectamos
				textBox2.Text = "Conectado con Ã©xito";
				miSocket.Close();
			}
			catch(Exception error) {
				textBox2.Text = "Error: {0}" + error.ToString();
			}
		}
		private void ProbarConexion_Click(object sender, EventArgs e) {
			PruebaConexion();
		}
	}
}
